server:  
  port: ${PORT:8080}

spring:  
  application:
    name: auth-service
  logging:
    pattern:
      console: "%clr(%d{yyyy-MM-dd HH:mm:ss}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr([${springAppName:-},%X{X-B3-TraceId:-},%X{X-B3-SpanId:-},%X{X-Span-Export:-}]){yellow} %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    level:
      org.springframework: WARN
      org.hibernate: WARN

eureka:  
  client:
    serviceUrl:
      defaultZone: ${DISCOVERY_URL:http://localhost:8761}/eureka/
  instance:
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 2
  
ribbon:
  eureka:
    enabled: true

github:
  client:
    clientId: 0ff5287f0f36cce6b31c
    clientSecret: 8335a571732eb27ad7590d2c9d693100969ae0f2
    accessTokenUri: https://github.com/login/oauth/access_token
    userAuthorizationUri: https://github.com/login/oauth/authorize
    tokenName: oauth_token
    authenticationScheme: query
    clientAuthenticationScheme: form
  resource:
    userInfoUri: https://api.github.com/user
      
openam:
  client:
    clientId: openamoauth2
    clientSecret: password
    accessTokenUri: http://ubuntu.chris.com:8080/openam/oauth2/access_token
    userAuthorizationUri: http://ubuntu.chris.com:8080/openam/oauth2/authorize
    redirectUri: http://localhost:8080/user
    tokenName: access_token
    authenticationScheme: query
    clientAuthenticationScheme: form
    scope: mail cn name
  resource:
    userInfoUri: http://ubuntu.chris.com:8080/openam/oauth2/tokeninfo
    preferTokenInfo: false